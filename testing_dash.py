import dash
from dash.dependencies import Input, Output
import dash_core_components as dcc
import dash_html_components as html
from pandas_datareader import data as web
from datetime import datetime as dt
import re
import os
import pymongo

td_style={'padding-top':'10px', 'padding-bottom':'10px','padding-left': '10px','padding-right': '10px','color':'#21618C'}
th_style={'padding-top':'10px', 'padding-bottom':'10px','padding-left': '10px','padding-right': '10px','color':'#D81C58'}

def generate_table(deployed_data):
    print deployed_data
    simplified_dict={}
    for key,value in deployed_data.iteritems():
        if key != 'Cartridges':
            for key1 in value.keys():
                if type(value[key1])!= list and value[key1].isdigit():
                    simplified_dict[key]=value[key1]
        else:
            for key1,value1 in value.iteritems():
                for key2 in value1.keys():
                    if value1[key2].isdigit():
                        if key2 == 'service_model_build':
                            simplified_dict[key1]=value1[key2]
                        else:
                            simplified_dict[key2]=value1[key2]
    return html.Div([
        html.Link(href='/assets/table_style.css', rel='stylesheet'),
        html.Table(className='reaponsive-table',
        # Header
        children=[
            html.Thead(
                html.Tr([
                    html.Th('Module', style=th_style),
                    #html.Th(''),
                    html.Th('Buildnumber',style=th_style)])
                ), 

        # Body
            html.Tbody(
                [html.Tr([
                    html.Td(key,style=td_style),
                    #html.Td(''),
                    html.Td(value,style=td_style)
                    ]) for key,value in simplified_dict.iteritems()]
                )
    ],style={
            'margin-left': 'auto',
            'margin-right': 'auto',
            'padding-left': '50px',
            'padding-right': '50px',
            #'background-color': '#DAF7A6',
            'border': 'solid',
            'textAlign': 'left',
            #'height': '100px'
            })
])
    
#connection = pymongo.MongoClient('mongodb://mongodb')
app = dash.Dash()
#app.config.supress_callback_exceptions=True  #It is set to suppress the exception that is generated while assigning callbacks to components that are not in the initial layout but are generated by other callbacks
app.css.config.serve_locally = True
app.scripts.config.serve_locally = True
#app.css.append_css({'external_url': '/assets/table_style.css'})
#app.server.static_folder = 'assets' 
#app.css.append_css({
 #   "external_url": "https://codepen.io/chriddyp/pen/bWLwgP.css"
#})

colors = {
    'background': '#A3E4D7',
    'text': '#FF5733'
}
with open('hosts') as fp:
    asap_hosts=fp.readlines()
asap_env_list=[]
for line in asap_hosts:
    try:
        env=re.search(r'^\[[A-Z]{2}[A-z][a-z0-9]',line).group(0)
        asap_env_list.append(re.search(r'[A-Z]{2}[A-z][a-z0-9]',env).group(0))
    except AttributeError:
	pass

all_options = {
    'ASAP': asap_env_list,
    'Clarify': ['DEV-NL','DEV-CH','JIT-NL']
}

app.layout = html.Div([
    #html.Div(style={'backgroudColor':'#AED6F1'}),
    html.H1(children='Release Deployment History', style={'textAlign': 'center','color': colors['text'],'backgroudColor':'#AED6F1'}),
    #html.H1(children='Release Deployment History', style={'textAlign': 'center','color': colors['text'],'backgroundColor':colors['background']}),
    html.Div([
        html.Div('Application Name', className='app_name',style={'color':'#597E16'}),
        html.Div(dcc.Dropdown(
            id='application-dropdown',
            options=[{'label': k, 'value': k} for k in all_options.keys()],
            )
                 )
        ]),
    html.Br(),
    html.Div([
        html.Div('Environment', className='app_name',style={'color':'#597E16'}),
        html.Div(dcc.Dropdown(id='environments-dropdown'))
        ]),
    #html.Br(),
    #html.Label('CRQ Number'),
    #dcc.Input(id='crq-number', value='', type='text'),

    html.Br(),
    html.Br(),
    html.Div(id='display-selected-values')
 
])
#@app.server.route('/static/<path:path>')
#def static_file(path):
#    static_folder = os.path.join(os.getcwd(), 'static')
#    return send_from_directory(static_folder, path)

@app.callback(
    dash.dependencies.Output('environments-dropdown', 'options'),
    [dash.dependencies.Input('application-dropdown', 'value')])
def set_environments_options(selected_application):
    return [{'label': i, 'value': i} for i in all_options[selected_application]]

@app.callback(
    dash.dependencies.Output('environments-dropdown', 'value'),
    [dash.dependencies.Input('environments-dropdown', 'options')])
def set_environments_value(available_options):
    return available_options[0]['value']

@app.callback(
    dash.dependencies.Output('display-selected-values', 'children'),
    [dash.dependencies.Input('application-dropdown', 'value'),
     dash.dependencies.Input('environments-dropdown', 'value')])
def set_display_children(selected_application, selected_environment):
    if selected_application == 'ASAP':
        connection = pymongo.MongoClient('mongodb://localhost:27017/')
        db=connection['Environment']
        coll=db['Environment']
        document_data=coll.find_one({'_id' : selected_environment }, { 'Old_version' : 1, '_id' : 0 })
        print document_data
        return generate_table(document_data['Old_version'])
        #return dcc.Link(html.Button(id='submit-button',children='Submit'), href='/asap_deployments')
    else:
        return dcc.Link(html.Button(id='submit-button',children='Submit'), href='/clarify_deployments')

if __name__ == '__main__':
    app.run_server(port=3005,debug=True)
